<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://myyyy.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://myyyy.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-03-31T10:13:01+00:00</updated><id>https://myyyy.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">大数据时代，如何进行数仓建模</title><link href="https://myyyy.github.io/blog/2023/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%97%B6%E4%BB%A3-%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%95%B0%E4%BB%93%E5%BB%BA%E6%A8%A1/" rel="alternate" type="text/html" title="大数据时代，如何进行数仓建模" /><published>2023-02-01T00:00:00+00:00</published><updated>2023-02-01T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/2023/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%97%B6%E4%BB%A3,%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%95%B0%E4%BB%93%E5%BB%BA%E6%A8%A1</id><content type="html" xml:base="https://myyyy.github.io/blog/2023/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%97%B6%E4%BB%A3-%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%95%B0%E4%BB%93%E5%BB%BA%E6%A8%A1/"><![CDATA[<h1 id="数仓整体构架">数仓整体构架</h1>
<p><img src="images/e2b98638e23034c4f0442965707aa81141a0934a1a3a22c4c8efd123d8816ebc.png" alt="picture 5" /> 
<img src="images/660889a0a7792dd522c5b687f6fe172a3ab8e023cd26508bdeb170ab02cee783.png" alt="picture 6" /></p>

<ol>
  <li>贴源数据层(ODS)，源业务系统数据的快照，保存细节数据，按天保存。
将业务系统数据库、日志文件等数据，离线或者实时采集到数据仓库中，支持历史数据回溯。表的结构、数据类型和数据源必须保持一致，可过滤敏感字段，对不同业务类型表使用不同的分区策略；</li>
  <li>基础数据层(DWD)，按业务概念组织细节数据，并进行名称、代码等标准化处理。
数据来源于ODS层，面向主题建设，对业务系统数据进行抽象和集成。DW层保存最细粒度的实体数据和维度数据，完成业务元数据标准化和数据清洗工作。</li>
  <li>通用数据层(DWM)，按照星型模型或雪花模型设计方式建设的最细业务粒度汇总层。在本层需要进行指标与维度的标准化，保证指标数据的唯一性。
根据需求状况对DWD数据进行抽象集成，这一层数据不是必须要有的，根据业务需求决定。DWM层数据仍然不会有信息的丢失，主要是信息的快照、拼接等工作。比如业务的用户表（可能来自拉链表）、在比如用户在业务流程不同步骤信息的拼接（如用户下单、付款）</li>
  <li>聚合数据层(DM)，数据来源于DW层，统一通用指标的业务口径，统一指标的多维度开发；标签宽表也构建于该层；DM层数据是根据业务的需求来导向的。</li>
  <li>维度层(DIM)，维度是对具体分析对象的分析角度，维度要具备丰富的属性，历史信息的可追溯性，对通用的维表要保持一致性。</li>
  <li>临时层(TMP)，用来降低加工过程计算难度，提高运行效率的临时表层。
应用数据层(ADS)，这一层跟业务系统强相关，可由业务方直接开发，也可由数仓团队开发，内容跟系统需求导向的。此层不作为数仓核心分层架构。</li>
</ol>

<h2 id="表命名规范">表命名规范</h2>
<p>常规表是我们需要固化的表，是正式使用的表，是目前一段时间内需要去维护去 完善的表。
规范：分层前缀[dwd|dws|ads]_部门_业务域_主题域_XXX_更新周期|数据范围</p>

<h2 id="周期数据范围数据表后缀">周期/数据范围（数据表后缀）：</h2>

<p>日快照：d
增量：i
全量：f
周：w
拉链表：chain</p>

<h1 id="数仓sqldemo">数仓SQLDemo</h1>
<h2 id="原表数据-ods_device_active">原表数据 ods_device_active</h2>

<table>
  <thead>
    <tr>
      <th>序号</th>
      <th style="text-align: center">字段</th>
      <th style="text-align: center">字段类型</th>
      <th style="text-align: center">字段描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td style="text-align: center">imei</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">imei</td>
    </tr>
    <tr>
      <td>2</td>
      <td style="text-align: center">android_id</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">android_id</td>
    </tr>
    <tr>
      <td>3</td>
      <td style="text-align: center">model</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">model</td>
    </tr>
    <tr>
      <td>4</td>
      <td style="text-align: center">platform</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">平台号</td>
    </tr>
    <tr>
      <td>5</td>
      <td style="text-align: center">app_ver</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">App版本</td>
    </tr>
    <tr>
      <td>6</td>
      <td style="text-align: center">net</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">网络</td>
    </tr>
    <tr>
      <td>7</td>
      <td style="text-align: center">region</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">region</td>
    </tr>
    <tr>
      <td>8</td>
      <td style="text-align: center">sdk_ver</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">sdk_ver</td>
    </tr>
    <tr>
      <td>9</td>
      <td style="text-align: center">client_time</td>
      <td style="text-align: center">BIGINT</td>
      <td style="text-align: center">客户端时间</td>
    </tr>
    <tr>
      <td>10</td>
      <td style="text-align: center">ip</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">ip</td>
    </tr>
    <tr>
      <td>11</td>
      <td style="text-align: center">properties</td>
      <td style="text-align: center">MAP&lt;STRING,STRING&gt;</td>
      <td style="text-align: center">额外的字段</td>
    </tr>
    <tr>
      <td>12</td>
      <td style="text-align: center">etl_tm</td>
      <td style="text-align: center">STRING</td>
      <td style="text-align: center">etl_tm</td>
    </tr>
  </tbody>
</table>

<h2 id="激活数仓建模构架">激活数仓建模构架</h2>
<h3 id="数仓分层设计">数仓分层设计</h3>
<p><img src="images/d907f384aff9afc635012717dc019525ca60ffda996f2f9970bcda55689466dd.png" alt="picture 1" /><br />
| 层级        | 表名字   |  备注  |
| ——–   | :—–:  | :—-:  |
| ods     | ods.ods_device_active |   |
| dwd     | isubject.dwd_dvc_active_di |   |
| dwd     | isubject.dwd_dvc_active_df |   |
| dwd     | icube.ads_dvc_active_d  |   |
| dwd     | icube.ads_dvc_active_retain_d |   |</p>

<h3 id="dwd_dvc_active_di-开发">dwd_dvc_active_di 开发</h3>

<pre><code class="language-SQL">insert overwrite table xxx.dwd_dvc_active_di partition( date = ${date - 1})
select  
imei,
android_id,
model,
platform,
app_ver,
net,
region,
sdk_ver,
ip2address(ip)[0] as country,
ip2address(ip)[1] as province,
ip2address(ip)[2] as city,
properties['device'] as product,
etl_tm,
from_unixtime(cast(client_time/1000 as int),'yyyyMMdd')as tm,
from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss') AS etl_tm
from ods.ods_device_active  where date=${date - 1}
</code></pre>
<h3 id="dwd_dvc_active_df开发">dwd_dvc_active_df开发</h3>

<pre><code class="language-SQL">with tmp as (
select  
coalesce(t1.android_id,t2.android_id),
coalesce(t1.region,t2.region),
coalesce(t1.model,t2.model),
coalesce(t1.product,t2.product),
coalesce(t1.app_ver,t2.app_ver),
coalesce(t1.net,t2.net),
coalesce(t1.country,t2.country),
coalesce(t1.province,t2.province),
coalesce(t1.city,t2.city),
least(t2.first_active_time,t1.first_active_time), --greatest 返回最小
greatest(t2.last_active_time,t1.last_active_time)--greatest 返回最大
from 
(
    --需要保证android_id是唯一主键
    select 
    android_id,region,model,product,app_ver,os_ver,
    net,country,province,city,
    min(tm) as first_active_time,max(tm) as last_active_time
    from isubject.dwd_dvc_active_di 
    where date= ${date - 1} 
    and android_id is not null
    group by android_id,region,model,product,app_ver,os_ver,
    net,country,province,city

)t1
FULL JOIN (
    select  
    android_id,region,model,product,app_ver,os_ver,
    net,country,province,city,
    first_active_time,last_active_time
    from isubject.dwd_dvc_active_di where date= ${date - 2}
)t2
on t1.android_id=t2.android_id
)
INSERT OVERWRITE TABLE isubject.dwd_dvc_active_df PARTITION(date=${date-1})
select *,from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss') AS etl_tm from tmp

</code></pre>

<h3 id="ads_dvc_active_d开发">ads_dvc_active_d开发</h3>

<pre><code class="language-SQL">
with tmp0 as (
    SELECT
    app_ver,model,os_ver,product,net,country,province,city,
    if(first_active_time==${date - 1},1,0) as d,
    if(first_active_time&gt;=${date - 6} and first_active_time&lt;=${date - 1},1,0) as d7,
    if(first_active_time&gt;=${date - 29} and first_active_time&lt;=${date - 1},1,0) as d30,
    if(last_active_time==${date - 1},1,0) as a,
    if(last_active_time&gt;=${date - 6} and last_active_time&lt;=${date - 1},1,0) as a7,
    if(last_active_time&gt;=${date - 29} and last_active_time&lt;=${date - 1},1,0) as a30,
    1 as tu
    from isubject.dwd_dvc_active_df
    where date=${date - 1}
),
tmp2 as (
    select 
    0 as idc,--集群
    GROUPING__ID as group_flag,
    app_ver,model,os_ver,product,net,country,province,city,
    sum(d),
    sum(d7),
    sum(d30),
    sum(a),
    sum(a7),
    sum(a30),
    sum(tu)
    from tmp0
    group by app_ver,model,os_ver,product,net,country,province,city
    grouping sets (
        ( app_ver,model,os_ver,product,net,country,province,city) 
    )
)
INSERT OVERWRITE TABLE icube.ads_dvc_active_d PARTITION(date=${date-1},source='APP-A') --source 二级分区 依据需要建表时设置
select*,from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss') AS etl_tm from tmp2

</code></pre>

<h3 id="ads_dvc_active_retain_d">ads_dvc_active_retain_d</h3>

<pre><code class="language-SQL">with tmp as (
    select 
    from_unixtime(unix_timestamp(startDate,'yyyy-MM-dd'),'yyyyMMdd') as base_date,
    app_ver,model,os_ver,product,net,country,province,city,
    count(distinct t0.android_id) as dau,
    count(distinct if(datediff(endDate, startDate)=1,t0.android_id,null)) as retention_1d,
    count(distinct if(datediff(endDate, startDate)=2,t0.android_id,null)) as retention_2d,
    count(distinct if(datediff(endDate, startDate)=3,t0.android_id,null)) as retention_3d,
    count(distinct if(datediff(endDate, startDate)=4,t0.android_id,null)) as retention_4d,
    count(distinct if(datediff(endDate, startDate)=5,t0.android_id,null)) as retention_5d,
    count(distinct if(datediff(endDate, startDate)=6,t0.android_id,null)) as retention_6d,
    count(distinct if(datediff(endDate, startDate)=7,t0.android_id,null)) as retention_7d,
    count(distinct if(datediff(endDate, startDate)=14,t0.android_id,null)) as retention_14d,
    count(distinct if(datediff(endDate, startDate)=30,t0.android_id,null)) as retention_30d
    from 
    (
        select 
        app_ver,model,os_ver,product,net,country,province,city,
        from_unixtime(unix_timestamp(cast(date AS string),'yyyyMMdd'),'yyyy-MM-dd') AS startDate
        from isubject.dwd_dvc_active_df 
        where date between ${date-30} and ${date-1}
        and last_active_time=date
    )t0
    left join
    (
        select
        from_unixtime(unix_timestamp(cast(date AS string),'yyyyMMdd'),'yyyy-MM-dd') AS endDate,
        android_id
        from isubject.dwd_dvc_active_df 
        where date between ${date-30} and ${date-1}
        and last_active_time=date
        group by date,android_id
    )t1
    on t0.android_id=t1.android_id
    group by startDate,app_ver,model,os_ver,product,net,country,province,city,

)
INSERT OVERWRITE TABLE icube.ads_dvc_active_retain_d PARTITION(date=${date - 1},source='APP-A')
select
app_ver,model,os_ver,product,net,country,province,city,
sum(dau),
sum(retention_1d),
sum(retention_2d),
sum(retention_3d),
sum(retention_4d),
sum(retention_5d),
sum(retention_6d),
sum(retention_7d),
sum(retention_14d),
sum(retention_30d),
from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss') as etl_tm
from tmp
group by app_ver,model,os_ver,product,net,country,province,city,

</code></pre>

<h1 id="拉链表开发">拉链表开发</h1>
<blockquote>
  <p>相关文档 <a href="../拉链表.pdf">拉链表介绍</a>
基于ods.ods_device_active 贴源数据层 可以设计出基于激活拉链表，节省存储空间。
<strong>表结构如下(字段需根据具体需求确认)</strong></p>
</blockquote>

<p>表名:isubject.dwd_dvc_active_chain
|序号|字段|字段类型|字段描述|
| ——– | :—–:| :—-:|:—-:|
|1|imei|STRING|imei|
|9|first_day|BIGINT|创建时间|
|9|last_day|BIGINT|修改时间|
|12|etl_tm|STRING|etl_tm|
|9|start_day|BIGINT|start_day|
|分区|end_day|i64|闭链时间|</p>

<p><strong>SQL如下</strong></p>
<pre><code class="language-SQL">--增量拉链
set parquet.compression=SNAPPY;
set hive.exec.parallel=true;
set hive.map.aggr=true;
set hive.merge.mapfiles = true;
set hive.merge.mapredfiles = true;
set hive.merge.size.per.task = 256000000;
set hive.merge.smallfiles.avgsize = 200000000;
set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;

from 
(
    select imei,first_day,last_day,start_day
    from isubject.dwd_dvc_active_chain 
    where start_day &lt;= ${date-2} and end_day &gt; ${date-2}
)t1
full join(
    select imei from isubject.dwd_dvc_active_di	
    where date=${date-1}
    group by imei
)t2 
on t1.did = t2.did

insert overwrite table isubject.dwd_dvc_active_chain partition(end_day=20991231)
select
coalesce(t2.imei,t1.imei) as imei,
coalesce(t1.first_day,${date-1}) as first_day,
if(isnotnull(t2.imei),${date-1},t1.last_day) as last_day,
if(isnotnull(t2.imei),${date-1},t1.start_day) as start_day,
from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss') as etl_tm
distribute by rand()

insert overwrite table isubject.dwd_dvc_active_chain partition(end_day=${date-1})
select 
t1.imei,
t1.first_day,
t1.last_day,
t1.start_day as start_day,
from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss') as etl_tm
where  t1.imei is not null and  t2.imei is not null
distribute by rand()
;
</code></pre>

<p><strong>如果是配置表有可能需要保存删除状态，表需要增加字段del_flg，拉链表SQL如下</strong></p>

<p>表名:isubject.dwd_dvc_active_chain
|序号|字段|字段类型|字段描述|
| ——– | :—–:| :—-:|:—-:|
|1|imei|STRING|imei|
|2|del_flg|STRING|del_flg|
|3|app_ver|STRING|App_版本|
|4|model|STRING|model|
|5|first_day|BIGINT|创建时间|
|6|last_day|BIGINT|修改时间|
|7|etl_tm|STRING|etl_tm|
|8|start_day|BIGINT|start_day|</p>

<pre><code class="language-SQL">--全量拉链
from 
(
    select imei,first_day,last_day,start_day
    from isubject.dwd_dvc_active_chain 
    where start_day &lt;= ${date-2} and end_day &gt; ${date-2}
)t1
full join(
    select imei,0 as del_flg,app_ver,model from isubject.dwd_dvc_active_di	
    where date=${date-1}
    group by imei
    --这个地方需要保证imei是唯一主键 才能做拉链 
)t2 
on t1.did = t2.did

insert overwrite table isubject.dwd_dvc_active_chain partition(end_day=20991231) --最新的数据 包含删除的数据
select
coalesce(t2.imei,t1.imei) as imei,
coalesce(t2.del_flg,1),
coalesce(t2.app_ver,t1.app_ver) as app_ver,
coalesce(t2.model,t1.model) as model,
coalesce(t1.first_day,${date-1}) as first_day,
if(isnotnull(t2.imei),${date-1},t1.last_day) as last_day,
IF(
    (t1.del_flg =1 and t2.imei IS NULL) 
    OR (t1.imei=t2.imei and 
    coalesce(t1.app_ver,0)=coalesce(t2.app_ver,0) and
     coalesce(t1.model,0)=coalesce(t2.model,0)
    ),
    t1.start_day,${date-1}
    ) AS start_day,
from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss') as etl_tm
distribute by rand()

insert overwrite table isubject.dwd_dvc_active_chain partition(end_day=${date-1}) --历史${date-1}天的数据,不包含${date-1}天前删除的数据
select 
t1.imei,
t1.del_flg,
t1.app_ver,
t1.model,
t1.first_day,
t1.last_day,
t1.start_day as start_day,
from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss') as etl_tm
where  t1.imei is not null 
AND
( (t2.imei is null and t1.del_flg=0 ) or 
  (t2.imei is not null and (
    coalesce(t1.app_ver,0)&lt;&gt;coalesce(t2.app_ver,0) or
    coalesce(t1.model,0)&lt;&gt;coalesce(t2.model,0)
    ))
) 
distribute by rand()
;
</code></pre>]]></content><author><name></name></author><category term="bigdata" /><summary type="html"><![CDATA[大数据时代，如何进行数仓建模]]></summary></entry><entry><title type="html">docker入门</title><link href="https://myyyy.github.io/blog/2017/docker%E5%85%A5%E9%97%A8/" rel="alternate" type="text/html" title="docker入门" /><published>2017-03-17T00:00:00+00:00</published><updated>2017-03-17T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/2017/docker%E5%85%A5%E9%97%A8</id><content type="html" xml:base="https://myyyy.github.io/blog/2017/docker%E5%85%A5%E9%97%A8/"><![CDATA[<p>#docker的环境配置</p>

<blockquote>
  <p>sudo apt-get update
sudo apt-get install docker.io</p>
</blockquote>

<p>#docker加速器配置</p>

<p>使用配置文件 /etc/docker/daemon.json（没有时新建该文件）
{
   “registry-mirrors”: [“<your accelerate="" address="">"]
}
注:基于阿里云的镜像加速</your></p>

<h1 id="下拉项目运行环境">下拉项目运行环境</h1>

<p>sudo docker pull registry.cn-hangzhou.aliyuncs.com/zhangxj/smartbow-web:0.2 
注:可跟你不同项目的需要配置不同的运行环境</p>

<p>#运行docker image</p>

<p>docker run –name web -ti registry.cn-hangzhou.aliyuncs.com/zhangxj/smartbow-web:0.2 bash</p>

<p>#编写脚本文件</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name:up.sh
#!/bin/bash
docker stop web
docker rm -v web

docker run --name web -ti -p 8887:8887 -p 8888:8888 -v /home/suyf/swork/git:/app registry.cn-hangzhou.aliyuncs.com/zhangxj/smartbow-web:0.2 bash
</code></pre></div></div>

<p>#命令</p>
<ol>
  <li>退出docker容器(非中断模式)
    <ul>
      <li>ctrl + P ctrl + q</li>
    </ul>
  </li>
  <li>进入docker image
    <ul>
      <li>docker exec -it container_id bash #不会终止</li>
      <li>docker attach <container> #需要注意的是，如果从这个stdin中exit，会导致容器的停止</container></li>
    </ul>
  </li>
  <li>检查容器运行
    <ul>
      <li>docker ps</li>
      <li>docker ps -a</li>
    </ul>
  </li>
  <li>查看容器信息
    <ul>
      <li>docker inspect <container></container></li>
    </ul>
  </li>
  <li>杀死or删除
    <ul>
      <li>docker stop <container></container></li>
      <li>docker kill <container></container></li>
      <li>docker rm <container></container></li>
      <li>docker rm $(docker ps -aq) #移除所有</li>
    </ul>
  </li>
</ol>

<p>#参考链接</p>
<blockquote>
  <p><a href="http://www.linuxidc.com/Linux/2015-05/117510.htm">docker命令简单介绍</a></p>
</blockquote>]]></content><author><name></name></author><category term="other" /><summary type="html"><![CDATA[docker的初步应用]]></summary></entry><entry><title type="html">Tornado设置默认403(error)页面</title><link href="https://myyyy.github.io/blog/2017/tornado%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4403(error)%E9%A1%B5%E9%9D%A2/" rel="alternate" type="text/html" title="Tornado设置默认403(error)页面" /><published>2017-03-17T00:00:00+00:00</published><updated>2017-03-17T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/2017/tornado%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4403(error)%E9%A1%B5%E9%9D%A2</id><content type="html" xml:base="https://myyyy.github.io/blog/2017/tornado%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4403(error)%E9%A1%B5%E9%9D%A2/"><![CDATA[<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">tornado</span>
<span class="kn">import</span> <span class="n">tornado.options</span>
<span class="kn">import</span> <span class="n">tornado.httpserver</span>
<span class="kn">from</span> <span class="n">tornado.web</span> <span class="kn">import</span> <span class="n">RequestHandler</span>
<span class="kn">from</span> <span class="n">tornado.options</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">options</span>

<span class="nf">define</span><span class="p">(</span><span class="s">"port"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">1994</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"run on the given port"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">BaseHandler</span><span class="p">(</span><span class="n">tornado</span><span class="p">.</span><span class="n">web</span><span class="p">.</span><span class="n">RequestHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">write_error</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">status_code</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">status_code</span> <span class="o">==</span> <span class="mi">403</span> <span class="ow">or</span> <span class="mi">405</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">status</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                <span class="n">data</span> <span class="o">=</span> <span class="s">'对不起，你没有权限访问该页面；如需帮助，请联系管理员 '</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">get_error_html</span><span class="p">(</span><span class="n">status_code</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_error_html</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">status_code</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">template_name</span> <span class="o">=</span> <span class="s">"{0}.html"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">status_code</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">exists</span><span class="p">(</span><span class="nf">template_path</span><span class="p">(</span><span class="n">template_name</span><span class="p">)):</span>
            <span class="n">template_name</span> <span class="o">=</span> <span class="s">"error.html"</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nf">exists</span><span class="p">(</span><span class="nf">template_path</span><span class="p">(</span><span class="n">template_name</span><span class="p">)):</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">status_code</span><span class="p">))</span>

        <span class="n">kwargs</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span>
            <span class="nf">dict</span><span class="p">(</span><span class="n">status_code</span><span class="o">=</span><span class="n">status_code</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="n">responses</span><span class="p">[</span><span class="n">status_code</span><span class="p">]))</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="n">template_name</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">IndexHandler</span><span class="p">(</span><span class="n">BaseHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="s">'hello'</span><span class="p">)</span>

<span class="n">handlers</span> <span class="o">=</span> <span class="p">[</span> 
    <span class="p">(</span><span class="sa">r</span><span class="s">'/index'</span><span class="p">,</span> <span class="n">IndexHandler</span><span class="p">),</span>
    <span class="p">]</span>   

<span class="n">settings</span> <span class="o">=</span> <span class="p">{</span> 
        <span class="s">'template_path'</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">),</span> <span class="s">"templates"</span><span class="p">),</span>
        <span class="s">'static_path'</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">),</span> <span class="s">'static'</span><span class="p">),</span>
        <span class="p">}</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
        <span class="n">tornado</span><span class="p">.</span><span class="n">options</span><span class="p">.</span><span class="nf">parse_command_line</span><span class="p">()</span>
        <span class="n">app</span> <span class="o">=</span> <span class="n">tornado</span><span class="p">.</span><span class="n">web</span><span class="p">.</span><span class="nc">Application</span><span class="p">(</span><span class="n">handlers</span><span class="o">=</span><span class="n">handlers</span><span class="p">,</span> <span class="o">**</span><span class="n">settings</span><span class="p">)</span>
        <span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="p">.</span><span class="n">httpserver</span><span class="p">.</span><span class="nc">HTTPServer</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
        <span class="n">http_server</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">port</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">port</span><span class="p">)</span>
        <span class="n">tornado</span><span class="p">.</span><span class="n">ioloop</span><span class="p">.</span><span class="n">IOLoop</span><span class="p">.</span><span class="nf">instance</span><span class="p">().</span><span class="nf">start</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[``` python import os import tornado import tornado.options import tornado.httpserver from tornado.web import RequestHandler from tornado.options import define, options]]></summary></entry><entry><title type="html">Tornado源码解析之ioloop</title><link href="https://myyyy.github.io/blog/2017/Tornado%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8BIoLoop/" rel="alternate" type="text/html" title="Tornado源码解析之ioloop" /><published>2017-03-15T00:00:00+00:00</published><updated>2017-03-15T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/2017/Tornado%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8BIoLoop</id><content type="html" xml:base="https://myyyy.github.io/blog/2017/Tornado%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8BIoLoop/"><![CDATA[<p>##预备知识</p>

<ol>
  <li>hasattr()&amp;getattr()
    <ul>
      <li>hasattr(object, name):判断一个对象是否有’name’属性或者’name’方法
 *getattr(object, name[,default]):获取对象object的属性或者方法，如果存在打印出来，如果不存在，打印出默认值，默认值可选。(如果获得的是方法,则返回的是方法的内存地址,有需要运行则需要加’()’)</li>
    </ul>
  </li>
  <li>classmethod &amp; staticmethod
    <ul>
      <li>待完善</li>
    </ul>
  </li>
  <li>future模块&amp;yeild
    <ul>
      <li>future:Python提供了__future__模块，把下一个新版本的特性导入到当前版本</li>
      <li>yeild: yield的英文单词意思是生产,若某个函数包含yield，这意味着这个函数已经是一个Generator<a href="http://www.pythontab.com/html/2015/pythonhexinbiancheng_0415/946.html">深入理解yield</a></li>
    </ul>
  </li>
  <li>python concurrent 模块
    <ul>
      <li>因python GIL全局锁的机制,产生了<a href="http://www.bubuko.com/infodetail-167068.html">concurrent</a>一个实现并发的模块</li>
    </ul>
  </li>
  <li>NotImplementedError()异常处理机制
    <ul>
      <li>NotImplemented 是一个非异常对象，NotImplementedError 是一个异常对象.<a href="http://www.tuicool.com/articles/JRb6Zr">参考链接</a>
 *<a href="https://segmentfault.com/q/1010000005012781">tornado 预定义接口返回异常的好处</a> 
 *<a href="https://blog.zorro.im/tornado-configurable/">tornado Configureable类</a></li>
    </ul>
  </li>
  <li>
    <p>Synchronous(同步)&amp;Asynchronous(异步)
 *理解概念<a href="http://www.cnblogs.com/anny0404/p/5691379.html">链接</a></p>
  </li>
  <li>
    <p>fileno()文件描述符
 *件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p>

    <ul>
      <li>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统</li>
    </ul>
  </li>
  <li>double ckeck问题
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> if not hasattr(IOLoop, "_instance"):
 with IOLoop._instance_lock:
     if not hasattr(IOLoop, "_instance"):
         # New instance after double check
         IOLoop._instance = IOLoop()
</code></pre></div>    </div>

    <ul>
      <li><a href="http://www.jb51.net/article/80363.htm">torndao中单例模式的应用</a></li>
    </ul>
  </li>
  <li>select、poll、epoll
    <ul>
      <li><a href="Linux IO模式及 select、poll、epoll详解">Linux IO模式及 select、poll、epoll详解</a></li>
    </ul>
  </li>
</ol>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[##预备知识]]></summary></entry><entry><title type="html">动态获取对象属性</title><link href="https://myyyy.github.io/blog/2016/%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95/" rel="alternate" type="text/html" title="动态获取对象属性" /><published>2016-10-19T00:00:00+00:00</published><updated>2016-10-19T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/2016/%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95</id><content type="html" xml:base="https://myyyy.github.io/blog/2016/%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95/"><![CDATA[<p>python 动态获取对象的属性和方法，并执行它们</p>

<p>首先通过一个例子来看一下本文中可能用到的对象和相关概念。</p>

<p>#coding: UTF-8</p>

<p>import sys #  模块，sys指向这个模块对象</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import inspect

def foo(): pass # 函数，foo指向这个函数对象

class Cat(object): # 类，Cat指向这个类对象

def __init__(self, name='kitty'):

	self.name = name

def sayHi(self): #  实例方法，sayHi指向这个方法对象，使用类或实例.sayHi访问

	print self.name, 'says Hi!' # 访问名为name的字段，使用实例.name访问

	cat = Cat() # cat是Cat类的实例对象

	print Cat.sayHi # 使用类名访问实例方法时，方法是未绑定的(unbound)

	print cat.sayHi # 使用实例访问实例方法时，方法是绑定的(bound)
</code></pre></div></div>

<ul>
  <li>有时候我们会碰到这样的需求，需要执行对象的某个方法，或是需要对对象的某个字段赋值，而方法名或是字段名在编码代码时并不能确定，需要通过参数传递字符串的形式输入。举个具体的例子：当我们需要实现一个通用的DBM框架时，可能需要对数据对象的字段赋值，但我们无法预知用到这个框架的数据对象都有些什么字段，换言之，我们在写框架的时候需要通过某种机制访问未知的属性。这个机制被称为反射（反过来让对象告诉我们他是什么），或是自省（让对象自己告诉我们他是什么，好吧我承认括号里是我瞎掰的- -#），用于实现在运行时获取未知对象的信息。反射是个很吓唬人的名词，听起来高深莫测，在一般的编程语言里反射相对其他概念来说稍显复杂，一般来说都是作为高级主题来讲；但在Python中反射非常简单，用起来几乎感觉不到与其他的代码有区别，使用反射获取到的函数和方法可以像平常一样加上括号直接调用，获取到类后可以直接构造实例；不过获取到的字段不能直接赋值，因为拿到的其实是另一个指向同一个地方的引用，赋值只能改变当前的这个引用而已。</li>
</ul>

<p>#1. 访问对象的属性
以下列出了几个内建方法，可以用来检查或是访问对象的属性。这些方法可以用于任意对象而不仅仅是例子中的Cat实例对象；Python中一切都是对象。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat = Cat('kitty')

print cat.name # 访问实例属性

cat.sayHi() # 调用实例方法

print dir(cat) # 获取实例的属性名，以列表形式返回

if hasattr(cat, 'name'): # 检查实例是否有这个属性

setattr(cat, 'name', 'tiger') # same as: a.name = 'tiger'

print getattr(cat, 'name') # same as: print a.name

getattr(cat, 'sayHi')() # same as: cat.sayHi()
</code></pre></div></div>

<p>dir([obj]): 
调用这个方法将返回包含obj大多数属性名的列表（会有一些特殊的属性不包含在内）。obj的默认值是当前的模块对象。
hasattr(obj, attr): 
这个方法用于检查obj是否有一个名为attr的值的属性，返回一个布尔值。
getattr(obj, attr): 
调用这个方法将返回obj中名为attr值的属性的值，例如如果attr为’bar’，则返回obj.bar。
setattr(obj, attr, val): 
调用这个方法将给obj的名为attr的值的属性赋值为val。例如如果attr为’bar’，则相当于obj.bar = val。
#2. 访问对象的元数据
	当你对一个你构造的对象使用dir()时，可能会发现列表中的很多属性并不是你定义的。这些属性一般保存了对象的元数据，比如类的__name__属性保存了类名。大部分这些属性都可以修改，不过改动它们意义并不是很大；修改其中某些属性如function.func_code还可能导致很难发现的问题，所以改改name什么的就好了，其他的属性不要在不了解后果的情况下修改。
	接下来列出特定对象的一些特殊属性。另外，Python的文档中有提到部分属性不一定会一直提供，下文中将以红色的星号*标记，使用前你可以先打开解释器确认一下。
	2.0. 准备工作：确定对象的类型
	在types模块中定义了全部的Python内置类型，结合内置方法isinstance()就可以确定对象的具体类型了。
	isinstance(object, classinfo): 
	检查object是不是classinfo中列举出的类型，返回布尔值。classinfo可以是一个具体的类型，也可以是多个类型的元组或列表。
	types模块中仅仅定义了类型，而inspect模块中封装了很多检查类型的方法，比直接使用types模块更为轻松，所以这里不给出关于types的更多介绍，如有需要可以直接查看types模块的文档说明。本文第3节中介绍了inspect模块。
##2.1. 模块(module)
	<strong>doc</strong>: 文档字符串。如果模块没有文档，这个值是None。
	*<strong>name</strong>: 始终是定义时的模块名；即使你使用import .. as 为它取了别名，或是赋值给了另一个变量名。
	*<strong>dict</strong>: 包含了模块里可用的属性名-属性的字典；也就是可以使用模块名.属性名访问的对象。
	<strong>file</strong>: 包含了该模块的文件路径。需要注意的是内建的模块没有这个属性，访问它会抛出异常！</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	import fnmatch as m

	print m.__doc__.splitlines()[0] # Filename matching with shell patterns.

	print m.__name__ # fnmatch

	print m.__file__ # /usr/lib/python2.6/fnmatch.pyc

	print m.__dict__.items()[0] # ('fnmatchcase', &lt;function fnmatchcase="" at="" 0xb73deb54=""&gt;)&lt;/function&gt;
</code></pre></div></div>

<p>##2.2. 类(class)
	<strong>doc</strong>: 文档字符串。如果类没有文档，这个值是None。
	*<strong>name</strong>: 始终是定义时的类名。
	*<strong>dict</strong>: 包含了类里可用的属性名-属性的字典；也就是可以使用类名.属性名访问的对象。
	<strong>module</strong>: 包含该类的定义的模块名；需要注意，是字符串形式的模块名而不是模块对象。
	*<strong>bases</strong>: 直接父类对象的元组；但不包含继承树更上层的其他类，比如父类的父类。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print Cat.__doc__ # None

print Cat.__name__ # Cat

print Cat.__module__ # __main__

print Cat.__bases__ # (&lt;type ?object?=""&gt;,)

print Cat.__dict__ # {'__module__': '__main__', ...}&lt;/type&gt;

2.3. 实例(instance)
实例是指类实例化以后的对象。
*__dict__: 包含了可用的属性名-属性字典。
*__class__: 该实例的类对象。对于类Cat，cat.__class__ == Cat 为 True。

print cat.__dict__

print cat.__class__

print cat.__class__ == Cat # True
</code></pre></div></div>

<p>2.4. 内建函数和方法(built-in functions and methods)
根据定义，内建的(built-in)模块是指使用C写的模块，可以通过sys模块的builtin_module_names字段查看都有哪些模块是内建的。这些模块中的函数和方法可以使用的属性比较少，不过一般也不需要在代码中查看它们的信息。
<strong>doc</strong>: 函数或方法的文档。
<strong>name</strong>: 函数或方法定义时的名字。
<strong>self</strong>: 仅方法可用，如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。
*<strong>module</strong>: 函数或方法所在的模块名。
2.5. 函数(function)
这里特指非内建的函数。注意，在类中使用def定义的是方法，方法与函数虽然有相似的行为，但它们是不同的概念。
<strong>doc</strong>: 函数的文档；另外也可以用属性名func_doc。
<strong>name</strong>: 函数定义时的函数名；另外也可以用属性名func_name。
*<strong>module</strong>: 包含该函数定义的模块名；同样注意，是模块名而不是模块对象。
*<strong>dict</strong>: 函数的可用属性；另外也可以用属性名func_dict。 
不要忘了函数也是对象，可以使用函数.属性名访问属性（赋值时如果属性不存在将新增一个），或使用内置函数has/get/setattr()访问。不过，在函数中保存属性的意义并不大。
func_defaults: 这个属性保存了函数的参数默认值元组；因为默认值总是靠后的参数才有，所以不使用字典的形式也是可以与参数对应上的。
func_code: 这个属性指向一个该函数对应的code对象，code对象中定义了其他的一些特殊属性，将在下文中另外介绍。
func_globals: 这个属性指向当前的全局命名空间而不是定义函数时的全局命名空间，用处不大，并且是只读的。
*func_closure: 这个属性仅当函数是一个闭包时有效，指向一个保存了所引用到的外部函数的变量cell的元组，如果该函数不是一个内部函数，则始终为None。这个属性也是只读的。
下面的代码演示了func_closure：
01
#coding: UTF-8
02
def foo():
03
n = 1
04
def bar():
05
print n # 引用非全局的外部变量n，构造一个闭包
06
n = 2
07
return bar
08</p>

<p>09
closure = foo()
10
print closure.func_closure
11</p>
<h1 id="使用dir得知cell对象有一个cell_contents属性可以获得值">使用dir()得知cell对象有一个cell_contents属性可以获得值</h1>
<p>12
print closure.func_closure[0].cell_contents # 2</p>

<p>由这个例子可以看到，遇到未知的对象使用dir()是一个很好的主意 ：）
2.6. 方法(method)
方法虽然不是函数，但可以理解为在函数外面加了一层外壳；拿到方法里实际的函数以后，就可以使用2.5节的属性了。
<strong>doc</strong>: 与函数相同。
<strong>name</strong>: 与函数相同。
*<strong>module</strong>: 与函数相同。
im_func: 使用这个属性可以拿到方法里实际的函数对象的引用。另外如果是2.6以上的版本，还可以使用属性名__func__。
im_self: 如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。如果是2.6以上的版本，还可以使用属性名__self__。
im_class: 实际调用该方法的类，或实际调用该方法的实例的类。注意不是方法的定义所在的类，如果有继承关系的话。
1
im = cat.sayHi
2
print im.im_func
3
print im.im_self # cat
4
print im.im_class # Cat</p>

<p>这里讨论的是一般的实例方法，另外还有两种特殊的方法分别是类方法(classmethod)和静态方法(staticmethod)。类方法还是方法，不过因为需要使用类名调用，所以他始终是绑定的；而静态方法可以看成是在类的命名空间里的函数（需要使用类名调用的函数），它只能使用函数的属性，不能使用方法的属性。
2.7. 生成器(generator)
生成器是调用一个生成器函数(generator function)返回的对象，多用于集合对象的迭代。
<strong>iter</strong>: 仅仅是一个可迭代的标记。
gi_code: 生成器对应的code对象。
gi_frame: 生成器对应的frame对象。
gi_running: 生成器函数是否在执行。生成器函数在yield以后、执行yield的下一行代码前处于frozen状态，此时这个属性的值为0。
next|close|send|throw: 这是几个可调用的方法，并不包含元数据信息，如何使用可以查看生成器的相关文档。
01
def gen():
02
for n in xrange(5):
03
yield n
04
g = gen()
05
print g # &lt;generator object gen at 0x…&gt;
06
print g.gi_code # &lt;code object gen at 0x…&gt;
07
print g.gi_frame # &lt;frame object at 0x…&gt;
08
print g.gi_running # 0
09
print g.next() # 0
10
print g.next() # 1
11
for n in g:
12
print n, # 2 3 4</p>

<p>接下来讨论的是几个不常用到的内置对象类型。这些类型在正常的编码过程中应该很少接触，除非你正在自己实现一个解释器或开发环境之类。所以这里只列出一部分属性，如果需要一份完整的属性表或想进一步了解，可以查看文末列出的参考文档。
2.8. 代码块(code)
代码块可以由类源代码、函数源代码或是一个简单的语句代码编译得到。这里我们只考虑它指代一个函数时的情况；2.5节中我们曾提到可以使用函数的func_code属性获取到它。code的属性全部是只读的。
co_argcount: 普通参数的总数，不包括<em>参数和<strong>参数。
co_names: 所有的参数名（包括*参数和</strong>参数）和局部变量名的元组。
co_varnames: 所有的局部变量名的元组。
co_filename: 源代码所在的文件名。
co_flags:  这是一个数值，每一个二进制位都包含了特定信息。较关注的是0b100(0×4)和0b1000(0×8)，如果co_flags &amp; 0b100 != 0，说明使用了</em>args参数；如果co_flags &amp; 0b1000 != 0，说明使用了**kwargs参数。另外，如果co_flags &amp; 0b100000(0×20) != 0，则说明这是一个生成器函数(generator function)。
1
co = cat.sayHi.func_code
2
print co.co_argcount # 1
3
print co.co_names # (‘name’,)
4
print co.co_varnames # (‘self’,)
5
print co.co_flags &amp; 0b100 # 0</p>

<p>2.9. 栈帧(frame)
栈帧表示程序运行时函数调用栈中的某一帧。函数没有属性可以获取它，因为它在函数调用时才会产生，而生成器则是由函数调用返回的，所以有属性指向栈帧。想要获得某个函数相关的栈帧，则必须在调用这个函数且这个函数尚未返回时获取。你可以使用sys模块的_getframe()函数、或inspect模块的currentframe()函数获取当前栈帧。这里列出来的属性全部是只读的。
f_back: 调用栈的前一帧。
f_code: 栈帧对应的code对象。
f_locals: 用在当前栈帧时与内建函数locals()相同，但你可以先获取其他帧然后使用这个属性获取那个帧的locals()。
f_globals: 用在当前栈帧时与内建函数globals()相同，但你可以先获取其他帧……。
1
def add(x, y=1):
2
f = inspect.currentframe()
3
print f.f_locals # same as locals()
4
print f.f_back # &lt;frame object at 0x…&gt;
5
return x+y
6
add(2)</p>

<p>2.10. 追踪(traceback)
追踪是在出现异常时用于回溯的对象，与栈帧相反。由于异常时才会构建，而异常未捕获时会一直向外层栈帧抛出，所以需要使用try才能见到这个对象。你可以使用sys模块的exc_info()函数获得它，这个函数返回一个元组，元素分别是异常类型、异常对象、追踪。traceback的属性全部是只读的。
tb_next: 追踪的下一个追踪对象。
tb_frame: 当前追踪对应的栈帧。
tb_lineno: 当前追踪的行号。
1
def div(x, y):
2
try:
3
return x/y
4
except:
5
tb = sys.exc_info()[2] # return (exc_type, exc_value, traceback)
6
print tb
7
print tb.tb_lineno # “return x/y” 的行号
8
div(1, 0)</p>

<ol>
  <li>使用inspect模块
inspect模块提供了一系列函数用于帮助使用自省。下面仅列出较常用的一些函数，想获得全部的函数资料可以查看inspect模块的文档。
3.1. 检查对象类型
is{module|class|function|method|builtin}(obj): 
检查对象是否为模块、类、函数、方法、内建函数或方法。
isroutine(obj): 
用于检查对象是否为函数、方法、内建函数或方法等等可调用类型。用这个方法会比多个is<em>()更方便，不过它的实现仍然是用了多个is</em>()。 
1
im = cat.sayHi
2
if inspect.isroutine(im):
3
im()</li>
</ol>

<p>对于实现了__call__的类实例，这个方法会返回False。如果目的是只要可以直接调用就需要是True的话，不妨使用isinstance(obj, collections.Callable)这种形式。我也不知道为什么Callable会在collections模块中，抱歉！我猜大概是因为collections模块中包含了很多其他的ABC(Abstract Base Class)的缘故吧：）</p>

<p>3.2. 获取对象信息
getmembers(object[, predicate]): 
这个方法是dir()的扩展版，它会将dir()找到的名字对应的属性一并返回，形如[(name, value), …]。另外，predicate是一个方法的引用，如果指定，则应当接受value作为参数并返回一个布尔值，如果为False，相应的属性将不会返回。使用is*作为第二个参数可以过滤出指定类型的属性。
getmodule(object): 
还在为第2节中的__module__属性只返回字符串而遗憾吗？这个方法一定可以满足你，它返回object的定义所在的模块对象。
get{file|sourcefile}(object): 
获取object的定义所在的模块的文件名|源代码文件名（如果没有则返回None）。用于内建的对象（内建模块、类、函数、方法）上时会抛出TypeError异常。
get{source|sourcelines}(object): 
获取object的定义的源代码，以字符串|字符串列表返回。代码无法访问时会抛出IOError异常。只能用于module/class/function/method/code/frame/traceack对象。
getargspec(func): 
仅用于方法，获取方法声明的参数，返回元组，分别是(普通参数名的列表, *参数名, **参数名, 默认值元组)。如果没有值，将是空列表和3个None。如果是2.6以上版本，将返回一个命名元组(Named Tuple)，即除了索引外还可以使用属性名访问元组中的元素。<br />
1
def add(x, y=1, *z):
2
return x + y + sum(z)
3
print inspect.getargspec(add)
4
#ArgSpec(args=[‘x’, ‘y’], varargs=’z’, keywords=None, defaults=(1,))</p>

<p>getargvalues(frame): 
仅用于栈帧，获取栈帧中保存的该次函数调用的参数值，返回元组，分别是(普通参数名的列表, *参数名, **参数名, 帧的locals())。如果是2.6以上版本，将返回一个命名元组(Named Tuple)，即除了索引外还可以使用属性名访问元组中的元素。
1
def add(x, y=1, *z):
2
print inspect.getargvalues(inspect.currentframe())
3
return x + y + sum(z)
4
add(2)
5
#ArgInfo(args=[‘x’, ‘y’], varargs=’z’, keywords=None, locals={‘y’: 1, ‘x’: 2, ‘z’: ()})</p>

<p>getcallargs(func[, *args][, **kwds]): 
返回使用args和kwds调用该方法时各参数对应的值的字典。这个方法仅在2.7版本中才有。
getmro(cls): 
返回一个类型元组，查找类属性时按照这个元组中的顺序。如果是新式类，与cls.<strong>mro__结果一样。但旧式类没有__mro__这个属性，直接使用这个属性会报异常，所以这个方法还是有它的价值的。 
1
print inspect.getmro(Cat)
2
#(&lt;class ‘__main</strong>.Cat’&gt;, &lt;type ‘object’&gt;)
3
print Cat.<strong>mro</strong>
4
#(&lt;class ‘<strong>main</strong>.Cat’&gt;, &lt;type ‘object’&gt;)python 动态获取对象的属性和方法，并执行它们
By admin ( 三月 2, 2011 at 10:58 下午) · Filed under 编程, python, 反射, 自省</p>

<p>首先通过一个例子来看一下本文中可能用到的对象和相关概念。
01
#coding: UTF-8
02
import sys #  模块，sys指向这个模块对象
03
import inspect
04
def foo(): pass # 函数，foo指向这个函数对象
05</p>

<p>06
class Cat(object): # 类，Cat指向这个类对象
07
def <strong>init</strong>(self, name=’kitty’):
08
self.name = name
09
def sayHi(self): #  实例方法，sayHi指向这个方法对象，使用类或实例.sayHi访问
10
print self.name, ‘says Hi!’ # 访问名为name的字段，使用实例.name访问
11</p>

<p>12
cat = Cat() # cat是Cat类的实例对象
13</p>

<p>14
print Cat.sayHi # 使用类名访问实例方法时，方法是未绑定的(unbound)
15
print cat.sayHi # 使用实例访问实例方法时，方法是绑定的(bound)</p>

<p>有时候我们会碰到这样的需求，需要执行对象的某个方法，或是需要对对象的某个字段赋值，而方法名或是字段名在编码代码时并不能确定，需要通过参数传递字符串的形式输入。举个具体的例子：当我们需要实现一个通用的DBM框架时，可能需要对数据对象的字段赋值，但我们无法预知用到这个框架的数据对象都有些什么字段，换言之，我们在写框架的时候需要通过某种机制访问未知的属性。
这个机制被称为反射（反过来让对象告诉我们他是什么），或是自省（让对象自己告诉我们他是什么，好吧我承认括号里是我瞎掰的- -#），用于实现在运行时获取未知对象的信息。反射是个很吓唬人的名词，听起来高深莫测，在一般的编程语言里反射相对其他概念来说稍显复杂，一般来说都是作为高级主题来讲；但在Python中反射非常简单，用起来几乎感觉不到与其他的代码有区别，使用反射获取到的函数和方法可以像平常一样加上括号直接调用，获取到类后可以直接构造实例；不过获取到的字段不能直接赋值，因为拿到的其实是另一个指向同一个地方的引用，赋值只能改变当前的这个引用而已。</p>
<ol>
  <li>访问对象的属性
以下列出了几个内建方法，可以用来检查或是访问对象的属性。这些方法可以用于任意对象而不仅仅是例子中的Cat实例对象；Python中一切都是对象。
01
cat = Cat(‘kitty’)
02</li>
</ol>

<p>03
print cat.name # 访问实例属性
04
cat.sayHi() # 调用实例方法
05</p>

<p>06
print dir(cat) # 获取实例的属性名，以列表形式返回
07
if hasattr(cat, ‘name’): # 检查实例是否有这个属性
08
setattr(cat, ‘name’, ‘tiger’) # same as: a.name = ‘tiger’
09
print getattr(cat, ‘name’) # same as: print a.name
10</p>

<p>11
getattr(cat, ‘sayHi’)() # same as: cat.sayHi()</p>

<p>dir([obj]): 
调用这个方法将返回包含obj大多数属性名的列表（会有一些特殊的属性不包含在内）。obj的默认值是当前的模块对象。
hasattr(obj, attr): 
这个方法用于检查obj是否有一个名为attr的值的属性，返回一个布尔值。
getattr(obj, attr): 
调用这个方法将返回obj中名为attr值的属性的值，例如如果attr为’bar’，则返回obj.bar。
setattr(obj, attr, val): 
调用这个方法将给obj的名为attr的值的属性赋值为val。例如如果attr为’bar’，则相当于obj.bar = val。</p>
<ol>
  <li>访问对象的元数据
当你对一个你构造的对象使用dir()时，可能会发现列表中的很多属性并不是你定义的。这些属性一般保存了对象的元数据，比如类的__name__属性保存了类名。大部分这些属性都可以修改，不过改动它们意义并不是很大；修改其中某些属性如function.func_code还可能导致很难发现的问题，所以改改name什么的就好了，其他的属性不要在不了解后果的情况下修改。
接下来列出特定对象的一些特殊属性。另外，Python的文档中有提到部分属性不一定会一直提供，下文中将以红色的星号*标记，使用前你可以先打开解释器确认一下。
2.0. 准备工作：确定对象的类型
在types模块中定义了全部的Python内置类型，结合内置方法isinstance()就可以确定对象的具体类型了。
isinstance(object, classinfo): 
检查object是不是classinfo中列举出的类型，返回布尔值。classinfo可以是一个具体的类型，也可以是多个类型的元组或列表。
types模块中仅仅定义了类型，而inspect模块中封装了很多检查类型的方法，比直接使用types模块更为轻松，所以这里不给出关于types的更多介绍，如有需要可以直接查看types模块的文档说明。本文第3节中介绍了inspect模块。
2.1. 模块(module)
<strong>doc</strong>: 文档字符串。如果模块没有文档，这个值是None。
*<strong>name</strong>: 始终是定义时的模块名；即使你使用import .. as 为它取了别名，或是赋值给了另一个变量名。
*<strong>dict</strong>: 包含了模块里可用的属性名-属性的字典；也就是可以使用模块名.属性名访问的对象。
<strong>file</strong>: 包含了该模块的文件路径。需要注意的是内建的模块没有这个属性，访问它会抛出异常！
1
import fnmatch as m
2
print m.<strong>doc</strong>.splitlines()[0] # Filename matching with shell patterns.
3
print m.<strong>name</strong> # fnmatch
4
print m.<strong>file</strong> # /usr/lib/python2.6/fnmatch.pyc
5
print m.<strong>dict</strong>.items()[0] # (‘fnmatchcase’, &lt;function fnmatchcase=”” at=”” 0xb73deb54=””&gt;)&lt;/function&gt;</li>
</ol>

<p>2.2. 类(class)
<strong>doc</strong>: 文档字符串。如果类没有文档，这个值是None。
*<strong>name</strong>: 始终是定义时的类名。
*<strong>dict</strong>: 包含了类里可用的属性名-属性的字典；也就是可以使用类名.属性名访问的对象。
<strong>module</strong>: 包含该类的定义的模块名；需要注意，是字符串形式的模块名而不是模块对象。
*<strong>bases</strong>: 直接父类对象的元组；但不包含继承树更上层的其他类，比如父类的父类。
1
print Cat.<strong>doc</strong> # None
2
print Cat.<strong>name</strong> # Cat
3
print Cat.<strong>module</strong> # <strong>main</strong>
4
print Cat.<strong>bases</strong> # (&lt;type ?object?=””&gt;,)
5
print Cat.<strong>dict</strong> # {‘<strong>module</strong>’: ‘<strong>main</strong>’, …}&lt;/type&gt;</p>

<p>2.3. 实例(instance)
实例是指类实例化以后的对象。
*<strong>dict</strong>: 包含了可用的属性名-属性字典。
*<strong>class</strong>: 该实例的类对象。对于类Cat，cat.<strong>class</strong> == Cat 为 True。
1
print cat.<strong>dict</strong>
2
print cat.<strong>class</strong>
3
print cat.<strong>class</strong> == Cat # True</p>

<p>2.4. 内建函数和方法(built-in functions and methods)
根据定义，内建的(built-in)模块是指使用C写的模块，可以通过sys模块的builtin_module_names字段查看都有哪些模块是内建的。这些模块中的函数和方法可以使用的属性比较少，不过一般也不需要在代码中查看它们的信息。
<strong>doc</strong>: 函数或方法的文档。
<strong>name</strong>: 函数或方法定义时的名字。
<strong>self</strong>: 仅方法可用，如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。
*<strong>module</strong>: 函数或方法所在的模块名。
2.5. 函数(function)
这里特指非内建的函数。注意，在类中使用def定义的是方法，方法与函数虽然有相似的行为，但它们是不同的概念。
<strong>doc</strong>: 函数的文档；另外也可以用属性名func_doc。
<strong>name</strong>: 函数定义时的函数名；另外也可以用属性名func_name。
*<strong>module</strong>: 包含该函数定义的模块名；同样注意，是模块名而不是模块对象。
*<strong>dict</strong>: 函数的可用属性；另外也可以用属性名func_dict。 
不要忘了函数也是对象，可以使用函数.属性名访问属性（赋值时如果属性不存在将新增一个），或使用内置函数has/get/setattr()访问。不过，在函数中保存属性的意义并不大。
func_defaults: 这个属性保存了函数的参数默认值元组；因为默认值总是靠后的参数才有，所以不使用字典的形式也是可以与参数对应上的。
func_code: 这个属性指向一个该函数对应的code对象，code对象中定义了其他的一些特殊属性，将在下文中另外介绍。
func_globals: 这个属性指向当前的全局命名空间而不是定义函数时的全局命名空间，用处不大，并且是只读的。
*func_closure: 这个属性仅当函数是一个闭包时有效，指向一个保存了所引用到的外部函数的变量cell的元组，如果该函数不是一个内部函数，则始终为None。这个属性也是只读的。
下面的代码演示了func_closure：
01
#coding: UTF-8
02
def foo():
03
n = 1
04
def bar():
05
print n # 引用非全局的外部变量n，构造一个闭包
06
n = 2
07
return bar
08</p>

<p>09
closure = foo()
10
print closure.func_closure
11</p>
<h1 id="使用dir得知cell对象有一个cell_contents属性可以获得值-1">使用dir()得知cell对象有一个cell_contents属性可以获得值</h1>
<p>12
print closure.func_closure[0].cell_contents # 2</p>

<p>由这个例子可以看到，遇到未知的对象使用dir()是一个很好的主意 ：）
2.6. 方法(method)
方法虽然不是函数，但可以理解为在函数外面加了一层外壳；拿到方法里实际的函数以后，就可以使用2.5节的属性了。
<strong>doc</strong>: 与函数相同。
<strong>name</strong>: 与函数相同。
*<strong>module</strong>: 与函数相同。
im_func: 使用这个属性可以拿到方法里实际的函数对象的引用。另外如果是2.6以上的版本，还可以使用属性名__func__。
im_self: 如果是绑定的(bound)，则指向调用该方法的类（如果是类方法）或实例（如果是实例方法），否则为None。如果是2.6以上的版本，还可以使用属性名__self__。
im_class: 实际调用该方法的类，或实际调用该方法的实例的类。注意不是方法的定义所在的类，如果有继承关系的话。
1
im = cat.sayHi
2
print im.im_func
3
print im.im_self # cat
4
print im.im_class # Cat</p>

<p>这里讨论的是一般的实例方法，另外还有两种特殊的方法分别是类方法(classmethod)和静态方法(staticmethod)。类方法还是方法，不过因为需要使用类名调用，所以他始终是绑定的；而静态方法可以看成是在类的命名空间里的函数（需要使用类名调用的函数），它只能使用函数的属性，不能使用方法的属性。
2.7. 生成器(generator)
生成器是调用一个生成器函数(generator function)返回的对象，多用于集合对象的迭代。
<strong>iter</strong>: 仅仅是一个可迭代的标记。
gi_code: 生成器对应的code对象。
gi_frame: 生成器对应的frame对象。
gi_running: 生成器函数是否在执行。生成器函数在yield以后、执行yield的下一行代码前处于frozen状态，此时这个属性的值为0。
next|close|send|throw: 这是几个可调用的方法，并不包含元数据信息，如何使用可以查看生成器的相关文档。
01
def gen():
02
for n in xrange(5):
03
yield n
04
g = gen()
05
print g # &lt;generator object gen at 0x…&gt;
06
print g.gi_code # &lt;code object gen at 0x…&gt;
07
print g.gi_frame # &lt;frame object at 0x…&gt;
08
print g.gi_running # 0
09
print g.next() # 0
10
print g.next() # 1
11
for n in g:
12
print n, # 2 3 4</p>

<p>接下来讨论的是几个不常用到的内置对象类型。这些类型在正常的编码过程中应该很少接触，除非你正在自己实现一个解释器或开发环境之类。所以这里只列出一部分属性，如果需要一份完整的属性表或想进一步了解，可以查看文末列出的参考文档。
2.8. 代码块(code)
代码块可以由类源代码、函数源代码或是一个简单的语句代码编译得到。这里我们只考虑它指代一个函数时的情况；2.5节中我们曾提到可以使用函数的func_code属性获取到它。code的属性全部是只读的。
co_argcount: 普通参数的总数，不包括<em>参数和<strong>参数。
co_names: 所有的参数名（包括*参数和</strong>参数）和局部变量名的元组。
co_varnames: 所有的局部变量名的元组。
co_filename: 源代码所在的文件名。
co_flags:  这是一个数值，每一个二进制位都包含了特定信息。较关注的是0b100(0×4)和0b1000(0×8)，如果co_flags &amp; 0b100 != 0，说明使用了</em>args参数；如果co_flags &amp; 0b1000 != 0，说明使用了**kwargs参数。另外，如果co_flags &amp; 0b100000(0×20) != 0，则说明这是一个生成器函数(generator function)。
1
co = cat.sayHi.func_code
2
print co.co_argcount # 1
3
print co.co_names # (‘name’,)
4
print co.co_varnames # (‘self’,)
5
print co.co_flags &amp; 0b100 # 0</p>

<p>2.9. 栈帧(frame)
栈帧表示程序运行时函数调用栈中的某一帧。函数没有属性可以获取它，因为它在函数调用时才会产生，而生成器则是由函数调用返回的，所以有属性指向栈帧。想要获得某个函数相关的栈帧，则必须在调用这个函数且这个函数尚未返回时获取。你可以使用sys模块的_getframe()函数、或inspect模块的currentframe()函数获取当前栈帧。这里列出来的属性全部是只读的。
f_back: 调用栈的前一帧。
f_code: 栈帧对应的code对象。
f_locals: 用在当前栈帧时与内建函数locals()相同，但你可以先获取其他帧然后使用这个属性获取那个帧的locals()。
f_globals: 用在当前栈帧时与内建函数globals()相同，但你可以先获取其他帧……。
1
def add(x, y=1):
2
f = inspect.currentframe()
3
print f.f_locals # same as locals()
4
print f.f_back # &lt;frame object at 0x…&gt;
5
return x+y
6
add(2)</p>

<p>2.10. 追踪(traceback)
追踪是在出现异常时用于回溯的对象，与栈帧相反。由于异常时才会构建，而异常未捕获时会一直向外层栈帧抛出，所以需要使用try才能见到这个对象。你可以使用sys模块的exc_info()函数获得它，这个函数返回一个元组，元素分别是异常类型、异常对象、追踪。traceback的属性全部是只读的。
tb_next: 追踪的下一个追踪对象。
tb_frame: 当前追踪对应的栈帧。
tb_lineno: 当前追踪的行号。
1
def div(x, y):
2
try:
3
return x/y
4
except:
5
tb = sys.exc_info()[2] # return (exc_type, exc_value, traceback)
6
print tb
7
print tb.tb_lineno # “return x/y” 的行号
8
div(1, 0)</p>

<ol>
  <li>使用inspect模块
inspect模块提供了一系列函数用于帮助使用自省。下面仅列出较常用的一些函数，想获得全部的函数资料可以查看inspect模块的文档。
3.1. 检查对象类型
is{module|class|function|method|builtin}(obj): 
检查对象是否为模块、类、函数、方法、内建函数或方法。
isroutine(obj): 
用于检查对象是否为函数、方法、内建函数或方法等等可调用类型。用这个方法会比多个is<em>()更方便，不过它的实现仍然是用了多个is</em>()。 
1
im = cat.sayHi
2
if inspect.isroutine(im):
3
im()</li>
</ol>

<p>对于实现了__call__的类实例，这个方法会返回False。如果目的是只要可以直接调用就需要是True的话，不妨使用isinstance(obj, collections.Callable)这种形式。我也不知道为什么Callable会在collections模块中，抱歉！我猜大概是因为collections模块中包含了很多其他的ABC(Abstract Base Class)的缘故吧：）</p>

<p>3.2. 获取对象信息
getmembers(object[, predicate]): 
这个方法是dir()的扩展版，它会将dir()找到的名字对应的属性一并返回，形如[(name, value), …]。另外，predicate是一个方法的引用，如果指定，则应当接受value作为参数并返回一个布尔值，如果为False，相应的属性将不会返回。使用is*作为第二个参数可以过滤出指定类型的属性。
getmodule(object): 
还在为第2节中的__module__属性只返回字符串而遗憾吗？这个方法一定可以满足你，它返回object的定义所在的模块对象。
get{file|sourcefile}(object): 
获取object的定义所在的模块的文件名|源代码文件名（如果没有则返回None）。用于内建的对象（内建模块、类、函数、方法）上时会抛出TypeError异常。
get{source|sourcelines}(object): 
获取object的定义的源代码，以字符串|字符串列表返回。代码无法访问时会抛出IOError异常。只能用于module/class/function/method/code/frame/traceack对象。
getargspec(func): 
仅用于方法，获取方法声明的参数，返回元组，分别是(普通参数名的列表, *参数名, **参数名, 默认值元组)。如果没有值，将是空列表和3个None。如果是2.6以上版本，将返回一个命名元组(Named Tuple)，即除了索引外还可以使用属性名访问元组中的元素。<br />
1
def add(x, y=1, *z):
2
return x + y + sum(z)
3
print inspect.getargspec(add)
4
#ArgSpec(args=[‘x’, ‘y’], varargs=’z’, keywords=None, defaults=(1,))</p>

<p>getargvalues(frame): 
仅用于栈帧，获取栈帧中保存的该次函数调用的参数值，返回元组，分别是(普通参数名的列表, *参数名, **参数名, 帧的locals())。如果是2.6以上版本，将返回一个命名元组(Named Tuple)，即除了索引外还可以使用属性名访问元组中的元素。
1
def add(x, y=1, *z):
2
print inspect.getargvalues(inspect.currentframe())
3
return x + y + sum(z)
4
add(2)
5
#ArgInfo(args=[‘x’, ‘y’], varargs=’z’, keywords=None, locals={‘y’: 1, ‘x’: 2, ‘z’: ()})</p>

<p>getcallargs(func[, *args][, **kwds]): 
返回使用args和kwds调用该方法时各参数对应的值的字典。这个方法仅在2.7版本中才有。
getmro(cls): 
返回一个类型元组，查找类属性时按照这个元组中的顺序。如果是新式类，与cls.<strong>mro__结果一样。但旧式类没有__mro__这个属性，直接使用这个属性会报异常，所以这个方法还是有它的价值的。 
1
print inspect.getmro(Cat)
2
#(&lt;class ‘__main</strong>.Cat’&gt;, &lt;type ‘object’&gt;)
3
print Cat.<strong>mro</strong>
4
#(&lt;class ‘<strong>main</strong>.Cat’&gt;, &lt;type ‘object’&gt;)
5
class Dog: pass
6
print inspect.getmro(Dog)
7
#(&lt;class <strong>main</strong>.Dog at 0x…&gt;,)
8
print Dog.<strong>mro</strong> # AttributeError</p>

<p>currentframe(): 
返回当前的栈帧对象。
其他的操作frame和traceback的函数请查阅inspect模块的文档，用的比较少，这里就不多介绍了。
Permalink</p>

<p>Leave a Comment
5
class Dog: pass
6
print inspect.getmro(Dog)
7
#(&lt;class <strong>main</strong>.Dog at 0x…&gt;,)
8
print Dog.<strong>mro</strong> # AttributeError</p>

<p>currentframe(): 
返回当前的栈帧对象。
其他的操作frame和traceback的函数请查阅inspect模块的文档，用的比较少，这里就不多介绍了。</p>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[python动态获取对象属性。]]></summary></entry><entry><title type="html">python pdb调试</title><link href="https://myyyy.github.io/blog/2016/python-pdb%E8%B0%83%E8%AF%95/" rel="alternate" type="text/html" title="python pdb调试" /><published>2016-05-21T00:00:00+00:00</published><updated>2016-05-21T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/2016/python%20pdb%E8%B0%83%E8%AF%95</id><content type="html" xml:base="https://myyyy.github.io/blog/2016/python-pdb%E8%B0%83%E8%AF%95/"><![CDATA[<h2 id="在python中使用pdb模块可以进行调试">在python中使用pdb模块可以进行调试</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pdb</span>
<span class="n">pdb</span><span class="p">.</span><span class="nf">set_trace</span><span class="p">()</span>
</code></pre></div></div>

<p>也可以使用python -m pdb mysqcript.py这样的方式</p>

<p>(Pdb) 会自动停在第一行，等待调试,这时你可以看看 帮助
(Pdb) h
    说明下这几个关键 命令</p>

<ul>
  <li>断点设置
 (Pdb)<code class="language-plaintext highlighter-rouge">b</code>  10 #断点设置在本py的第10行
 或(Pdb)b  ots.py:20 #断点设置到 ots.py第20行
 删除断点（Pdb）b #查看断点编号
          (Pdb)cl 2 #删除第2个断点</li>
  <li>运行
  (Pdb)n #单步运行
  (Pdb)s #细点运行 也就是会下到，方法
  (Pdb)<code class="language-plaintext highlighter-rouge">c</code> #跳到下个断点</li>
  <li>查看
  (Pdb)<code class="language-plaintext highlighter-rouge">p</code> param #查看当前 变量值
  (Pdb)l #查看运行到某处代码
  (Pdb)a #查看全部栈内变量
  (Pdb)w 列出目前call stack 中的所在层。
  (Pdb)d 在call stack中往下移一层
  (Pdb)u 在call stack中往上移一层。如果在上移一层之后按下 n ,则会在上移之后的一层执行下一个叙述,之前的 function call 就自动返回。
  (Pdb)cl 清除指定的断点。如果没有带参数,则清除所有断点。
  (Pdb)disable 取消所有断点的功能,但仍然保留这些断点。
  (Pdb)enable 恢复断点的功能。
  (Pdb)ignore 设定断点的忽略次数。如果没指定 count,其初始 为 0。当 count 为 0 时,断点会正常动作。若有指定 count,则每次执行到该中断, count 就少 1,直到 count 数为 0。
  (Pdb)condition bpnumber [condition]
  (Pdb)j(ump) lineNo. 跳到某行执行。只有在 call stack 的最底部才能作用。
  (Pdb)l  列出目前所在档案中的位置。连续地 l 命令会一直列到档案结尾,可以使用指定行数或范围来打印。
  (Pdb)pp 和 p 命令类似,但是使用 pprint module(没用过 pprint,详情请参考 Python Library Reference)。
  (Pdb)alias 以一个”别名”代替”一群除错命令”,有点类似 c/c++ 的 macro(详情请参考 Python Library Reference)。
  (Pdb)unalias 取消某个 alias。
  (Pdb)[!]statement 在目前的环境(context)中执行叙述。</li>
</ul>]]></content><author><name></name></author><category term="python" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">文章模版【侧边栏】</title><link href="https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88-%E4%BE%A7%E8%BE%B9%E6%A0%8F/" rel="alternate" type="text/html" title="文章模版【侧边栏】" /><published>1999-12-22T00:00:00+00:00</published><updated>1999-12-22T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88%E3%80%90%E4%BE%A7%E8%BE%B9%E6%A0%8F%E3%80%91</id><content type="html" xml:base="https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88-%E4%BE%A7%E8%BE%B9%E6%A0%8F/"><![CDATA[<h2 id="equations">Equations</h2>

<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine.
You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>.
If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph.
Here is an example:</p>

\[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\]

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>

<hr />

<h2 id="citations">Citations</h2>

<p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag.
The key attribute is a reference to the id provided in the bibliography.
The key attribute can take multiple ids, separated by commas.</p>

<p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover).
If you have an appendix, a bibliography is automatically created and populated in it.</p>

<p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover.
However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p>

<hr />

<h2 id="footnotes">Footnotes</h2>

<p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag.
The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p>

<hr />

<h2 id="code-blocks">Code Blocks</h2>

<p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags.
An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>.
For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p>

<d-code block="" language="javascript">
  var x = 25;
  function(x) {
    return x * x;
  }
</d-code>

<p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode.
You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<hr />

<h2 id="interactive-plots">Interactive Plots</h2>

<p>You can add interative plots using plotly + iframes :framed_picture:</p>

<div class="l-page">
  <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe>
</div>

<p>The plot must be generated separately and saved into an HTML file.
To generate the plot that you see above, you can use the following code snippet:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="s">'https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="s">'Latitude'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="s">'Longitude'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="s">'Magnitude'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="s">"stamen-terrain"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="s">'assets/plotly/demo.html'</span><span class="p">)</span></code></pre></figure>

<hr />

<h2 id="layouts">Layouts</h2>

<p>The main text column is referred to as the body.
It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p>

<div class="fake-img l-body">
  <p>.l-body</p>
</div>

<p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p>

<div class="fake-img l-page">
  <p>.l-page</p>
</div>

<p>All of these have an outset variant if you want to poke out from the body text a little bit.
For instance:</p>

<div class="fake-img l-body-outset">
  <p>.l-body-outset</p>
</div>

<div class="fake-img l-page-outset">
  <p>.l-page-outset</p>
</div>

<p>Occasionally you’ll want to use the full browser width.
For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>.
You can also inset the element a little from the edge of the browser by using the inset variant.</p>

<div class="fake-img l-screen">
  <p>.l-screen</p>
</div>
<div class="fake-img l-screen-inset">
  <p>.l-screen-inset</p>
</div>

<p>The final layout is for marginalia, asides, and footnotes.
It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p>

<div class="fake-img l-gutter">
  <p>.l-gutter</p>
</div>

<hr />

<h2 id="other-typography">Other Typography?</h2>

<p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p>

<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>

<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>

<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>

<ol>
  <li>First ordered list item</li>
  <li>Another item
⋅⋅* Unordered sub-list.</li>
  <li>Actual numbers don’t matter, just that it’s a number
⋅⋅1. Ordered sub-list</li>
  <li>And another item.</li>
</ol>

<p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p>

<p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>

<ul>
  <li>Unordered list can use asterisks</li>
  <li>Or minuses</li>
  <li>Or pluses</li>
</ul>

<p><a href="https://www.google.com">I’m an inline-style link</a></p>

<p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p>

<p><a href="https://www.mozilla.org">I’m a reference-style link</a></p>

<p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p>

<p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p>

<p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p>

<p>URLs and URLs in angle brackets will automatically get turned into links.
http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes
example.com (but not on Github, for example).</p>

<p>Some text to show that the reference links can follow later.</p>

<p>Here’s our logo (hover to see the title text):</p>

<p>Inline-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1" /></p>

<p>Reference-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2" /></p>

<p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="s">"Python syntax highlighting"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div>

<p>Colons can be used to align columns.</p>

<table>
  <thead>
    <tr>
      <th>Tables</th>
      <th style="text-align: center">Are</th>
      <th style="text-align: right">Cool</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>col 3 is</td>
      <td style="text-align: center">right-aligned</td>
      <td style="text-align: right">$1600</td>
    </tr>
    <tr>
      <td>col 2 is</td>
      <td style="text-align: center">centered</td>
      <td style="text-align: right">$12</td>
    </tr>
    <tr>
      <td>zebra stripes</td>
      <td style="text-align: center">are neat</td>
      <td style="text-align: right">$1</td>
    </tr>
  </tbody>
</table>

<p>There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don’t need to make the
raw Markdown line up prettily. You can also use inline Markdown.</p>

<table>
  <thead>
    <tr>
      <th>Markdown</th>
      <th>Less</th>
      <th>Pretty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>Still</em></td>
      <td><code class="language-plaintext highlighter-rouge">renders</code></td>
      <td><strong>nicely</strong></td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p>
</blockquote>

<p>Quote break.</p>

<blockquote>
  <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>
</blockquote>

<p>Here’s a line for us to start with.</p>

<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>

<p>This line is also a separate paragraph, but…
This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">文章模版【评论】</title><link href="https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88-%E8%AF%84%E8%AE%BA/" rel="alternate" type="text/html" title="文章模版【评论】" /><published>1999-12-10T00:00:00+00:00</published><updated>1999-12-10T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88%E3%80%90%E8%AF%84%E8%AE%BA%E3%80%91</id><content type="html" xml:base="https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88-%E8%AF%84%E8%AE%BA/"><![CDATA[<p>This post shows how to add GISCUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">文章模版【图片】</title><link href="https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88-%E5%9B%BE%E7%89%87/" rel="alternate" type="text/html" title="文章模版【图片】" /><published>1999-11-15T00:00:00+00:00</published><updated>1999-11-15T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88%E3%80%90%E5%9B%BE%E7%89%87%E3%80%91</id><content type="html" xml:base="https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88-%E5%9B%BE%E7%89%87/"><![CDATA[<p>This is an example post with image galleries.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/9-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/9-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/9-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/7-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/7-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/7-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>
<div class="caption">
    A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all.
</div>

<p>Images can be made zoomable.
Simply add <code class="language-plaintext highlighter-rouge">data-zoomable</code> to <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tags that you want to make zoomable.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/8-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/8-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/8-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/10-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/10-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/10-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>The rest of the images in this post are all zoomable, arranged into different mini-galleries.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/11-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/11-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/11-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/11.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/12-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/12-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/12-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/7-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/7-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/7-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><category term="images" /><summary type="html"><![CDATA[this is what included images could look like]]></summary></entry><entry><title type="html">文章模版【数学公式】</title><link href="https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/" rel="alternate" type="text/html" title="文章模版【数学公式】" /><published>1999-10-20T00:00:00+00:00</published><updated>1999-10-20T00:00:00+00:00</updated><id>https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88%E3%80%90%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E3%80%91</id><content type="html" xml:base="https://myyyy.github.io/blog/1999/%E6%96%87%E7%AB%A0%E6%A8%A1%E7%89%88-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"><![CDATA[<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p>

\[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\]

<p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math.
MathJax will automatically number equations:</p>

<p>\begin{equation}
\label{eq:cauchy-schwarz}
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
\end{equation}</p>

<p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p>

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><category term="math" /><summary type="html"><![CDATA[an example of a blog post with some math]]></summary></entry></feed>